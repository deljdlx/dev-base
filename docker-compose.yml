services:

  traefik:
    image: traefik:v3.1
    # container_name: traefik
    restart: unless-stopped
    profiles: ["proxy"]
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      # Pour HTTPS local avec mkcert, dÃ©commentez ci-dessous et ajoutez certs:
      # - --entrypoints.websecure.address=:443
      # - --certificatesresolvers.dev.acme.tlschallenge=true
      # - --certificatesresolvers.dev.acme.email=you@example.com
      # - --certificatesresolvers.dev.acme.storage=/letsencrypt/acme.json
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      # - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # - ./letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)
      - traefik.http.routers.traefik.entrypoints=web
      - traefik.http.routers.traefik.service=api@internal
      # - traefik.http.routers.traefik.tls=true
      # - traefik.http.routers.traefik.tls.certresolver=dev
    networks:
      app-net:
        aliases :
          - web.test
          - monitor.test
          - myurgo.test

  selenium:
    image: selenium/standalone-chrome:latest
    # container_name: selenium
    shm_size: 2g
    restart: unless-stopped
    profiles: ["testing"]
    ports:
      - "${SELENIUM_WEBDRIVER_PORT:-4444}:4444"   # WebDriver endpoint
      - "${SELENIUM_UI_PORT:-7900}:7900"   # noVNC UI
    environment:
      - TZ=${TZ:-Europe/Paris}
      - SE_NODE_MAX_SESSIONS=${SE_NODE_MAX_SESSIONS:-1}
      - SE_NODE_OVERRIDE_MAX_SESSIONS=${SE_NODE_OVERRIDE_MAX_SESSIONS:-true}
      # - SE_OPTS=--log-level FINE  # Uncomment for verbose logs
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.selenium.rule=Host(`selenium.${DOMAIN:-localhost}`)
      - traefik.http.routers.selenium.entrypoints=web
      - traefik.http.services.selenium.loadbalancer.server.port=7900

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.26
    # container_name: filebeat
    user: root
    # Copy config inside container to satisfy Filebeat's strict ownership check, then start
    command: ["/bin/sh","-c","cp /config/filebeat.yml /usr/share/filebeat/filebeat.yml && chown root:root /usr/share/filebeat/filebeat.yml && exec filebeat -e --strict.perms=false"]
    restart: unless-stopped
    profiles: ["observability"]
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      - app-net
    volumes:
      - ./docker/filebeat/filebeat.yml:/config/filebeat.yml:ro
      - filebeat_data:/usr/share/filebeat/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - app_logs:${LOG_WEB_PATH:-/var/logs/web}:ro
    environment:
      - LOG_WEB_PATH=${LOG_WEB_PATH:-/var/logs/web}

  mailhog:
    image: mailhog/mailhog
    # container_name: mailhog
    restart: unless-stopped
    profiles: ["dev"]
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"   # SMTP
      - "${MAILHOG_HTTP_PORT:-8025}:8025"   # UI Web
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.mailhog.rule=Host(`mailhog.${DOMAIN:-localhost}`)
      - traefik.http.routers.mailhog.entrypoints=web
      # - traefik.http.routers.mailhog.tls=true
      - traefik.http.services.mailhog.loadbalancer.server.port=8025

  netdata:
    profiles: ["monitoring"]
    image: netdata/netdata:latest
    # container_name: netdata
    cap_add:
      - SYS_PTRACE
      - NET_ADMIN
    ports:
      - "${NETDATA_PORT:-19999}:19999"
    volumes:
      - netdata_data:/var/lib/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    restart: unless-stopped
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.netdata.rule=Host(`netdata.${DOMAIN:-localhost}`)
      - traefik.http.routers.netdata.entrypoints=web
      # - traefik.http.routers.netdata.tls=true
      - traefik.http.services.netdata.loadbalancer.server.port=19999

  db:
    image: mariadb:11
    # container_name: db
    ports:
      - "${DB_BIND_ADDR:-0.0.0.0}:${DB_PORT:-3306}:3306"
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-rootpass}
      MARIADB_DATABASE: ${MARIADB_DATABASE:-myurgo}
      MARIADB_USER: ${MARIADB_USER:-root}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD:-rootpass}
      TZ: ${TZ:-Europe/Paris}
      MARIADB_ROOT_HOST: "${MARIADB_ROOT_HOST:-%}"
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mariadb-conf.d:/etc/mysql/conf.d:ro
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h 127.0.0.1 -uroot -p$$MARIADB_ROOT_PASSWORD || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.26
    # container_name: elasticsearch
    restart: unless-stopped
    profiles: ["observability"]
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      # Disable security for local dev simplicity (do not use in production)
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "${ES_HTTP_PORT:-9200}:9200"
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.elasticsearch.rule=Host(`es.${DOMAIN:-localhost}`)
      - traefik.http.routers.elasticsearch.entrypoints=web
      # - traefik.http.routers.elasticsearch.tls=true
      - traefik.http.services.elasticsearch.loadbalancer.server.port=9200
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.26
    # container_name: kibana
    restart: unless-stopped
    profiles: ["observability"]
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=${KIBANA_ELASTICSEARCH_HOSTS:-http://elasticsearch:9200}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.kibana.rule=Host(`kibana.${DOMAIN:-localhost}`)
      - traefik.http.routers.kibana.entrypoints=web
      # - traefik.http.routers.kibana.tls=true
      - traefik.http.services.kibana.loadbalancer.server.port=5601
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:5601/api/status | grep -Eq '\"state\":\"(green|yellow)\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.17.26
    # container_name: apm-server
    restart: unless-stopped
    profiles: ["observability"]
    ports:
      - "${APM_PORT:-8200}:8200"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks: [app-net]
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.apm.rule=Host(`apm.${DOMAIN:-localhost}`)
      - traefik.http.routers.apm.entrypoints=web
      # - traefik.http.routers.apm.tls=true
      - traefik.http.services.apm.loadbalancer.server.port=8200
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8200/ >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s
    environment:
      - output.elasticsearch.hosts=["http://${APM_ELASTICSEARCH_HOST:-elasticsearch}:${APM_ELASTICSEARCH_PORT:-9200}"]
      - apm-server.kibana.enabled=true
      - apm-server.kibana.host=http://${APM_KIBANA_HOST:-kibana}:${APM_KIBANA_PORT:-5601}

  portainer:
    profiles: ["monitoring"]
    image: portainer/portainer-ce:latest
    # container_name: portainer
    restart: unless-stopped
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
    environment:
      - ADMIN_USERNAME=${PORTAINER_ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${PORTAINER_ADMIN_PASSWORD:-aaaaaaaaaaaa}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app-net
    labels:
      - traefik.enable=true
      - traefik.docker.network=app-net
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN:-localhost}`)
      - traefik.http.routers.portainer.entrypoints=web
      # - traefik.http.routers.portainer.tls=true
      - traefik.http.services.portainer.loadbalancer.server.port=9000

  docker-socket-proxy:
    image: tecnativa/docker-socket-proxy:latest
    # container_name: docker-socket-proxy
    restart: unless-stopped
    profiles: ["tools"]
    # Do NOT publish this port externally; other containers can reach it at http://docker-socket-proxy:2375
    # ports:
    #   - "127.0.0.1:2375:2375"  # Optional: only bind to localhost if you really need host access
    environment:
      - LOG_LEVEL=warning
      # Allow only the minimal set of API groups needed; set to 0 to deny
      - CONTAINERS=1
      - IMAGES=1
      - NETWORKS=1
      - VOLUMES=1
      - INFO=1
      - VERSION=1
      - EVENTS=1
      # - POST=0  # Keep write ops disabled by default
      # - DELETE=0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-net

volumes:
  app_logs:
  db_data:
  composer_cache:
  es_data:
  portainer_data:
  netdata_data:
  filebeat_data:

networks:
  app-net:
    name: app-net
    driver: bridge